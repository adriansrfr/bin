#!/bin/bash
#
# Foreground color e.g echo -e "${green}Hello ${blue}LinuxHint"
red='\033[0;31m'
green='\033[0;32m'
blue='\033[0;34m'
grey='\033[0;47m'
cyan='\033[0;46m'

# Background color
BLUE='\033[0;44m'
BLACK='\033[0;30m'
WHITE='\033[0;30;47m'
RED='\033[0;41m'

function Github
{
  cd ~/vimwiki || exit ;
  nvim ~/vimwiki/Git_steps.md
}

function BashShowColors
{

    local row col blockrow blockcol red green blue
    local showcolor=_showcolor256_${1:-bg}
    local white="\033[1;37m"
    local reset="\033[0m"

    echo -e "Set foreground color: \\\\033[38;5;${white}NNN${reset}m"
    echo -e "Set background color: \\\\033[48;5;${white}NNN${reset}m"
    echo -e "Reset color & style:  \\\\033[0m"
    echo

    echo 16 standard color codes:
    for row in {0..1}; do
        for col in {0..7}; do
            $showcolor $(( row*8 + col )) $row
        done
        echo
    done
    echo

    echo 6·6·6 RGB color codes:
    for blockrow in {0..2}; do
        for red in {0..5}; do
            for blockcol in {0..1}; do
                green=$(( blockrow*2 + blockcol ))
                for blue in {0..5}; do
                    $showcolor $(( red*36 + green*6 + blue + 16 )) $green
                done
                echo -n "  "
            done
            echo
        done
        echo
    done

    echo 24 grayscale color codes:
    for row in {0..1}; do
        for col in {0..11}; do
            $showcolor $(( row*12 + col + 232 )) $row
        done
        echo
    done
    echo
}

function _showcolor256_fg() {
    local code=$( printf %03d $1 )
    echo -ne "\033[38;5;${code}m"
    echo -nE " $code "
    echo -ne "\033[0m"
}

function _showcolor256_bg() {
    if (( $2 % 2 == 0 )); then
        echo -ne "\033[1;37m"
    else
        echo -ne "\033[0;30m"
    fi
    local code=$( printf %03d $1 )
    echo -ne "\033[48;5;${code}m"
    echo -nE " $code "
    echo -ne "\033[0m"
}


function BashColors
{

printf "Reset\n"
echo Color_Off='\033[0m'       # Text Reset
printf "\n"
echo Regular Colors
echo Black='\033[0;30m'        # Black
echo Red='\033[0;31m'          # Red
echo Green='\033[0;32m'        # Green
echo Yellow='\033[0;33m'       # Yellow
echo Blue='\033[0;34m'         # Blue
echo Purple='\033[0;35m'       # Purple
echo Cyan='\033[0;36m'         # Cyan
echo White='\033[0;37m'        # White
printf "\n"
echo Bold
echo BBlack='\033[1;30m'       # Black
echo BRed='\033[1;31m'         # Red
echo BGreen='\033[1;32m'       # Green
echo BYellow='\033[1;33m'      # Yellow
echo BBlue='\033[1;34m'        # Blue
echo BPurple='\033[1;35m'      # Purple
echo BCyan='\033[1;36m'        # Cyan
echo BWhite='\033[1;37m'       # White
printf "\n"
echo  Underline
echo UBlack='\033[4;30m'       # Black
echo URed='\033[4;31m'         # Red
echo UGreen='\033[4;32m'       # Green
echo UYellow='\033[4;33m'      # Yellow
echo UBlue='\033[4;34m'        # Blue
echo UPurple='\033[4;35m'      # Purple
echo UCyan='\033[4;36m'        # Cyan
echo UWhite='\033[4;37m'       # White
printf "\n"
echo Background
echo On_Black='\033[40m'       # Black
echo On_Red='\033[41m'         # Red
echo On_Green='\033[42m'       # Green
echo On_Yellow='\033[43m'      # Yellow
echo On_Blue='\033[44m'        # Blue
echo On_Purple='\033[45m'      # Purple
echo On_Cyan='\033[46m'        # Cyan
echo On_White='\033[47m'       # White
printf "\n"
echo High Intensity
echo IBlack='\033[0;90m'       # Black
echo IRed='\033[0;91m'         # Red
echo IGreen='\033[0;92m'       # Green
echo IYellow='\033[0;93m'      # Yellow
echo IBlue='\033[0;94m'        # Blue
echo IPurple='\033[0;95m'      # Purple
echo ICyan='\033[0;96m'        # Cyan
echo IWhite='\033[0;97m'       # White
printf "\n"
echo Bold High Intensity
echo BIBlack='\033[1;90m'      # Black
echo BIRed='\033[1;91m'        # Red
echo BIGreen='\033[1;92m'      # Green
echo BIYellow='\033[1;93m'     # Yellow
echo BIBlue='\033[1;94m'       # Blue
echo BIPurple='\033[1;95m'     # Purple
echo BICyan='\033[1;96m'       # Cyan
echo BIWhite='\033[1;97m'      # White
printf "\n"
echo High Intensity backgrounds
echo On_IBlack='\033[0;100m'   # Black
echo On_IRed='\033[0;101m'     # Red
echo On_IGreen='\033[0;102m'   # Green
echo On_IYellow='\033[0;103m'  # Yellow
echo On_IBlue='\033[0;104m'    # Blue
echo On_IPurple='\033[0;105m'  # Purple
echo On_ICyan='\033[0;106m'    # Cyan
echo On_IWhite='\033[0;107m'   # White

}


function projects
{
cd /home/adrian/Documents/Projects || exit
}

function ProgrammingMakeWebserver {
sudo python3 -m http.server
}

function ProgrammingMakeproject
{

  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a project name: " project; fi ;
  if [ ! "$#" -eq 0 ]; then project=$1; fi

mkdir  "${project}";

cd "${project}" || exit ;
touch index.html
mkdir styles
touch styles/main.css
mkdir javascript
touch javascript/main.js
}

function gpt
{
# https://github.com/jucasoliveira/terminalGPT/blob/main/README.md
npx terminalgpt chat;
# Uninstall: npm uninstall terminalgpt -g ; npm uninstall terminalgpt
}

function ProgrammingGetDiff 
{
 nvim -d "$1" "$2";
}
alias getdiff=ProgrammingGetDiff

function ProgrammingGetDup
{
  find . | uniq -i -d
}
alias getdup=ProgrammingGetDup

function ProgrammingTableFromJsonArray(){
     jq -r '(.[0]|keys_unsorted|(.,map(length*"-"))),.[]|map(.)|@tsv'|column -ts $'\t'
}

function ProgrammingGetHistory
{
# Returns last one hundred *unique* commands
  history | awk '{a[$4]++}END{for(i in a){print a[i] " " i}}' |
    sort -rn | head -n 100 | fzf
}
alias gethistory=ProgrammingGetHistory

function ProgrammingTopTen 
{
# Gets top ten most command bash commands
        re='^[0-9]+$' 
        if ! [[ $1 =~ $re ]] ; then 
        echo "error: $1 not a number" >&2
         else
  history | awk '{cmd[$2]++} END {for(elem in cmd) {print cmd[elem], elem}}' | sort -n -r | head -n "$1";
        fi
}
