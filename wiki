#!/bin/bash

#function WikiFilesCreationFind
#{
##todo include date in search like WikiFilesModified
#  exa -u --sort=created   | fzf --preview 'bat --color=always {}' --preview-window=right:wrap --phony --bind="change:reload:rg --files --no-ignore --hidden --follow --format=none --sort path --glob '!.git/*'" | xargs -r nvim -p
#}
#--preview-window 'top,80%,border-bottom')

function WikiFilesModified
{
  cd "$HOME/vimwiki" || exit
nvim "$(stat -c '%y %n' *.md | awk -F'[:| ]'  '{s = ""; for (i=6; i<= NF; i++) s= s $i ; print $1 " " $2 ":" $3 " " s}' | sort --reverse| fzf --preview "bat --color=always {3}" --preview-window 'right,60%,border-bottom' | awk -F' ' '{print $3}')"
}


function WikiNoteCreate
{
  local file_name="$1"
  local static_path="$HOME/vimwiki/"
  local full_path="$static_path$file_name.md"

  if [ -e "$full_path" ]; then
    echo "file exists: $full_path"
    vim "$full_path"
  else
    echo "file does not exist: $full_path"
    touch "$full_path";
    vim "$full_path";
  fi
}


function WikiGoogleBackup
{
rclone copy ~/vimwiki Google: --progress && echo Backup from local to Google completed! ;
sleep 5 ;

rclone copy Google: ~/vimwiki --progress && echo Backup from Google to local completed! ;
}


function WikiTodo
{
cd ~/vimwiki || exit
#  varword=#todo

 file_line=$(rg "^#todo"  -i --no-ignore --no-heading --column --color ansi  |
        fzf --ansi --border --border-label 'WikiTodos' --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20')
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}
alias todowiki=WikiTodo

function WikiLinksFz {
if [[ $# -eq 0 ]]; then 
  echo "fzlinks requires an argument." && return
fi

unset input_file;
if [[ $# -gt 0 ]]; then
    input_file="$*"
  fi

    cd ~/vimwiki || exit
unset file
    local file

    extension=.md
file=$(rg -o '\[.*\]\(([^)]+)\)' "$1" "$input_file$extension" 2> /dev/null | sed 's/.*(\(.*\))/\1.md/' | cat - <(grep -o '\[\[.*\]\]' "$input_file$extension" 2> /dev/null | sed 's/\[\[\(.*\)\]\]/\1.md/g; s/\]/,/g')  | fzf --no-sort --ansi --border --preview 'bat --style=numbers --color=always --line-range :500 {}') 

     if [[ -n $file ]]
     then
        vim "$file"
     fi
}

function WikiLinksFz2
{
  cd ~/vimwiki || exit

rg "\[\w+*\]\(\w+*\)" -w | awk -F"[" '{print "[" $2}' | awk '{print $1}'

}

function WikiLines
{
  cd $HOME/vimwiki || exit;
  # Searches all lines in current directory
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
    if [ ! "$#" -eq 0 ]; then varWord=$1; fi

    if [[ $# -gt 0 ]]; then
      varWord="$*"
    fi

    file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi | 
      fzf --no-sort --ansi --border --border-label 'WikiLines' --delimiter=: \
      --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 
          #--preview-window 'top,80%,border-bottom')

          file=$(echo "$file_line" | gawk -F: '{print $1}')
          line=$(echo "$file_line" | gawk -F: '{print $2}')
          if [[ -n $file ]]; then
            nvim +"$line" "$file"
          fi

}


# function WikiLines_old
#   {
# # for exact word search use single quotes 'cat'
#     cd ~/vimwiki || exit

#   if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
#   if [ ! "$#" -eq 0 ]; then varWord=$1; fi

# if [[ $# -gt 0 ]]; then
#     varword="$*"
#   fi

#  file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi  |
#       fzf --no-sort --ansi --border --border-label 'WikiLines' --delimiter=: \
#         --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 

#         file=$(echo "$file_line" | gawk -F: '{print $1}')
#         line=$(echo "$file_line" | gawk -F: '{print $2}')
#     if [[ -n $file ]]; then
#         nvim +"$line" "$file"
#     fi
# }


function WikiLinesNonRecursive
  {
# for exact word search use single quotes 'cat'
    cd ~/vimwiki || exit

  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varword="$*"
  fi

    file_line=$(rg "$varWord" --max-depth 1 -S --no-ignore --no-heading --column --color ansi  |
      fzf --no-sort --ansi --border --border-label 'WikiLinesNonRecursive' --delimiter=: \
        --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}

function WikiLinesNonRecursiveExact
  {
# requires argument to have quotes
# formerly fzwikiword
    cd ~/vimwiki || exit

  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varword="$*"
  fi

    file_line=$(rg "$varWord" --max-depth 1 -F -S --no-ignore --no-heading --column --color ansi  |
      fzf --no-sort --ansi --border --border-label 'WikiLinesNonRecursiveExact'  --delimiter=: \
        --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}
function WikiFiles
{
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varword="$*"
  fi

cd ~/vimwiki || exit


echo "$varWord"
read -p "Press enter to continue"

unset file
unset file1
if [[ -n "$varWord" ]]; then
file1=$(find "$varWord" -maxdepth 1 -type f -not -path '*/.md' )
echo "Find found $file1"
read -p "Press enter to continue"
fi
if [[ -n "$file1" ]]; then
  vim "$file1"
  return
fi
# find . -maxdepth 1 -type f -not -path '*/.*' -printf "%f\n" 
local file
file=$( fdfind -d 1 | fzf --ansi --border --border-label 'WikiFiles' --preview 'bat --style=numbers --color=always --line-range :500 {}' )

if [[ -n $file ]]; then
       vim -c "BTags" "$file" 
    fi
}

function WikiDailyNotes
{
  cd "$HOME/vimwiki/DailyNotes" || exit
  nvim "$(stat -c "%n" ./*.md |  sort --reverse| fzf --no-sort --ansi --border --border-label 'WikiDailyNotes' --preview 'bat --style=numbers --color=always --line-range :500 {}')" 
}

function WikiDailyNotesLines
{
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search Exercise: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varword="$*"
  fi
cd ~/vimwiki/DailyNotes || exit
 file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi  | sort --reverse |
        fzf --no-sort --ansi --border --border-label 'WikiDailyNotesLines' --delimiter=: \
        --preview 'bat --color always {1} -n -H {2} -r {2}:+20')
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi

}
alias dailyNotesLines=WikiDailyNotesLines

function WikiExercise
{
  
  cd "$HOME/vimwiki/Exercise" || exit
  nvim "$(stat -c "%n" ./*.md |  sort --reverse| fzf --no-sort --ansi --border --border-label 'WikiExercise' --preview 'bat --style=numbers --color=always --line-range :500 {}')" 
}


function WikiHeader
{
# searches vimwiki headers
  cd ~/vimwiki || exit
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search VimWiki: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varword="$*"
  fi

 cd ~/vimwiki || exit
 file_line=$(rg "^(#+ )+[^#]*$varWord*"  -i --no-ignore --no-heading --column --color ansi -g '*.md' | 
        fzf --ansi --border --border-label 'WikiHeader' --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}

function WikiExerciseLines
{
# fzword in bin folder
# used to be fzbin
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search Exercise: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varWord="$*"
  fi
cd ~/vimwiki/Exercise || exit
 file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi  | sort --reverse |
        fzf --no-sort --ansi --border --border-label 'WikiExerciseLines' --delimiter=: \
        --preview 'bat --color always {1} -n -H {2} -r {2}:+20')
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi

}
alias exerciseLines=WikiExerciseLines




function WikiHeadersFz
{
  cd ~/vimwiki || exit
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search VimWiki for tags: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varWord="$*"
  fi
  cd ~/vimwiki || exit

  if [ -z "$varWord" ]; then file_line=$(rg "\B^#\w+\b*$varWord*"  -i --no-ignore --no-heading --column --color ansi -g '*.md' |
  fzf --ansi --border --border-label 'WikiHeadersFz' --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20')
  else

file_line=$(rg "^#\w+*$varWord*"  -i --no-ignore --no-heading --column --color ansi -g '*.md' |

        fzf --ansi --border --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')
fi
        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}


function WikiBacklinksFz
{
# fuzzy get back links
  cd ~/vimwiki || exit
  # searches current directory. Searches inside files for keyword. Lists files with preview
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to get backlinks: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

  local file
    file="$(rg --max-count=1 --ignore-case --files-with-matches --fixed-strings --no-messages \("$varWord"\) |
      fzf --preview="rg --ignore-case --fixed-strings --pretty --context 10 $varWord {}")"

   if [[ -n $file ]]
   then
      vim "$file"
   fi
}


function WikiOrphanFiles
{

  cd ~/vimwiki || exit

File_List="$(rg -Files --max-depth 1 | xargs -n 1 basename )" # Get all files in wiki

for f in ${File_List}  
do
    filename="${f%%.*}" # Convert each file to its basename
    results=$(rg -i "\($filename\)"  --no-heading) # Search each file for a basename link

([ -z "$results" ] && echo -e "\e[31mNo links for ($filename)::($results)\e[0m") 
 unset results
done
}

function WikiOrphanLinks
{
  cd ~/vimwiki || exit

File_List="$(rg -Files --max-depth 1 | xargs -n 1 basename )" # Get all files in wiki

for f in ${File_List}  
do
    filename="${f%%.*}" # Convert each file to its basename

    links=$(rg "$filename" | rg "\($filename\)")

    results=$(rg -i "\($links\)"  --no-heading)

([ -z "$results" ] && echo -e "\e[31mNo links for ($filename)::($results)\e[0m") 
 unset results
done
}

# function fztodo
#  {
#   cd ~/vimwiki || exit
#   varword=#todo
#     local file
#     file="$(rg --max-count=1 --ignore-case --files-with-matches --no-messages "$varWord" |
#       fzf --preview="rg --ignore-case --pretty --context 10 \"$varWord\" {}" &&  rg --colors 'match:bg:yellow' \
#       --ignore-case --pretty --context 10 "$varWord")"

#    if [[ -n $file ]]
#    then
#       vim "$file"
#    fi
#  }

# function fztodo
# {
#   cd ~/vimwiki || exit
#   varword=#todo
#     local file
#     file="$(rg --max-count=1 --ignore-case --files-with-matches --no-messages "$varWord" |
#       fzf --preview="rg --ignore-case --pretty --context 10 \"$varWord\" {}" &&  rg --colors 'match:bg:yellow' \
#       --ignore-case --pretty --context 10 "$varWord")"
# 
#    if [[ -n $file ]]
#    then
#       vim "$file"
#    fi
# }

# function WikiFilesCreated
# {
#   # Creation date does not exist
#   # gets file creation history in vimwiki
#   # #todo create similar command in vim
#   cd "$HOME/vimwiki" || exit
#   nvim "$(stat -c '%y %n' *.md | awk -F'[:| ]'  '{s = ""; for (i=6; i<= NF; i++) s= s $i ; print $1 " " $2 ":" $3 " " s}' | sort --reverse| fzf --preview "bat --color=always {3}" --preview-window 'right,60%,border-bottom' | awk -F' ' '{print $3}')"
# }

# function WikiFilesRecent_old
# {
#   cd ~/vimwiki || exit
# powershell -c "Get-ChildItem -file | Select-Object Name, Size, LastWriteTime | Sort-Object LastWriteTime -Descending | Select-Object -First 20";
# }

# function WikiFilesRecent
# {
#   # Not useful because backups overwrite the recently accessed property
#   # This would be useful for files not on constant backup
#   cd "$HOME/vimwiki" || exit
# nvim "$(stat -c '%x %n' *.md | awk -F'[:| ]'  '{s = ""; for (i=6; i<= NF; i++) s= s $i ; print $1 " " $2 ":" $3 " " s}' | sort --reverse| fzf --preview "bat --color=always {3}" --preview-window 'right,60%,border-bottom' | awk -F' ' '{print $3}')"
# }

