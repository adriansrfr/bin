#!/bin/bash
#todo: add headers, keybindings, preview label, refresh, sort alphabetically or in order
# https://thevaluable.dev/practical-guide-fzf-example/
#
# commands needed:
# bfile
# bword
# bheader
#
# wfile
# wword
# wheader
# 
# fzfile
# fzword


function fzlinks
{
if [[ $# -eq 0 ]]; then 
  echo "fzlinks requires an argument." && return
fi

unset input_file;
if [[ $# -gt 0 ]]; then
    input_file="$*"
  fi

    cd ~/vimwiki || exit
unset file
    local file

    extension=.md
file=$(rg -o '\[.*\]\(([^)]+)\)' "$1" "$input_file$extension" 2> /dev/null | sed 's/.*(\(.*\))/\1.md/' | cat - <(grep -o '\[\[.*\]\]' "$input_file$extension" 2> /dev/null | sed 's/\[\[\(.*\)\]\]/\1.md/g; s/\]/,/g')  | fzf --no-sort --ansi --border --preview 'bat --style=numbers --color=always --line-range :500 {}') 

     if [[ -n $file ]]
     then
        vim "$file"
     fi
}

function fzlinks1
{
  cd ~/vimwiki || exit

rg "\[\w+*\]\(\w+*\)" -w | awk -F"[" '{print "[" $2}' | awk '{print $1}'

}

function fztodo
{
  cd ~/vimwiki || exit
  varWord=#todo
    local file
    file="$(rg --max-count=1 --ignore-case --files-with-matches --no-messages "$varWord" |
      fzf --preview="rg --ignore-case --pretty --context 10 \"$varWord\" {}" &&  rg --colors 'match:bg:yellow' \
      --ignore-case --pretty --context 10 "$varWord")"

   if [[ -n $file ]]
   then
      vim "$file"
   fi
}



# function bword2
#   {
#     cd ~/VimWiki || exit
#   if [ "$#" -eq 0 ]; then read -r -p "Enter a word to search bin folder: " varWord; fi ;
#   if [ "$#" -gt 0 ]; then varWord="$*"; fi
# 
#     local file
#     file="$(rg --ignore-case --files-with-matches --no-messages "$varWord" |
#       fzf --preview="rg --ignore-case --pretty --context 10 \"$varWord\" {}" )"
# # --max-count=1  
#    if [[ -n $file ]]
#    then
#       vim "$file"
#    fi
# }

function bfile
{
  # Used to be fzmodule and fbin
if [[ $# -gt 0 ]]; then
    varWord="$*"
  else unset varWord;
  fi
  cd ~/bin || exit
unset file

if [[ -n "$varWord" ]]; then
  vim "${varWord}"
  return
fi

local file
file=$( find . -maxdepth 1 -type f -not -path '*/.*' -printf "%f\n" | sort | fzf --no-sort --ansi --border --preview 'bat --style=numbers --color=always --line-range :500 {}' | sort) # &&  rg --colors 'match:bg:yellow' \
#      --ignore-case --pretty --context 10 "$varWord")

    if [[ -n $file ]]
    then
       vim -c "BTags" $file 
    fi
    # Updated files list to be sorted, brightened with ansi, added border
    # Updated naming convention for consistency and intuitiveness
  }

function bword
{
# Fzword in bin folder
# Used to be fzbin
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varWord="$*"
  fi
cd ~/bin || exit 
 file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi  | sort |
        fzf --no-sort --ansi --border --delimiter=: \
        --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi

}

function wword
  {
    # Formerly fzwikiword
    cd ~/vimwiki || exit

  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varWord="$*"
  fi

    file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi  | sort |
      fzf --no-sort --ansi --border --delimiter=: \
        --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}

function bheaders
{
# fzfunction
if [[ $# -gt 0 ]]; then
    search_terms="$*"
  else unset search_terms;
  fi
cd "$HOME/bin" || exit;
 local file_line
 local file
 local line
 file_line=$(rg "^function *$search_terms*" -i --no-ignore --no-heading --column --color ansi -g \* | 
        fzf --ansi --border --no-reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}

function wfile
{
  # Used to be fzmodule and fbin
if [[ $# -gt 0 ]]; then
    varWord="$*"
  else unset varWord;
  fi
  cd ~/vimwiki || exit
unset file

if [[ -n "$varWord" ]]; then
  vim "${varWord}"
  return
fi

local file
file=$( find . -maxdepth 1 -type f -not -path '*/.*' -printf "%f\n" | sort | fzf --no-sort --ansi --border --preview 'bat --style=numbers --color=always --line-range :500 {}' | sort) # &&  rg --colors 'match:bg:yellow' \
#      --ignore-case --pretty --context 10 "$varWord")

    if [[ -n $file ]]
    then
       vim -c "BTags" $file 
    fi
    # Updated files list to be sorted, brightened with ansi, added border
    # Updated naming convention for consistency and intuitiveness
  }


function wheader
{
# Searches vimwiki headers
  cd ~/vimwiki || exit
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search VimWiki: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varWord="$*"
  fi

 cd ~/vimwiki || exit
 file_line=$(rg "^(#+ )+[^#]*$varWord*"  -i --no-ignore --no-heading --column --color ansi -g '*.md' | 
        fzf --ansi --border --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}

function fzfile1
{
  # Used to be fzmodule and fbin
if [[ $# -gt 0 ]]; then
    varWord="$*"
  else unset varWord;
  fi
unset file

if [[ -n "$varWord" ]]; then
  vim "${varWord}.md"
  return
fi

local file
#file=$( find . -maxdepth 1 -type f -not -path '*/.*' -name "*.md" -printf "%f\n" | sort | fzf --no-sort --ansi --border --preview 'bat --style=numbers --color=always --line-range :500 {}' | sort) 


file="$(find . -maxdepth 1 -type f -not -path '*/.*' -name "*.md" -printf "%f\n" | sort | fzf -m --no-sort --ansi --border --header='CTRL-a:select-all,CTRL-d:deselect,CTRL-r:reload,DEL:trash' --bind='ctrl-a:select-all,ctrl-d:deselect-all,ctrl-r:reload(fd -t f -t --maxdepth 1),del:execute(gio trash {})' --preview '[[ -r {} ]] && bat --style=numbers --color=always --line-range :500 {}')"




# &&  rg --colors 'match:bg:yellow' \
#      --ignore-case --pretty --context 10 "$varWord")

    if [[ -n $file ]]
    then
       vim -c "BTags" $file 
    fi

    # Updated files list to be sorted, brightened with ansi, added border
    # Updated naming convention for consistency and intuitiveness
# Possible solution to the word splitting:
# https://www.reddit.com/r/linuxquestions/comments/aorbec/problem_with_fzf_multiselect_for_files_with/

  }



function fzword   
{
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search a word: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varWord="$*"
  fi

 file_line=$(rg "$varWord"  -i --no-ignore --no-heading --column --color ansi  | 
        fzf --ansi --border --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}

function fzdeletefile
{
  #fzfiles now has delete capabilities
  local file
file="$(fd -t f -t --maxdepth 1 | fzf -m --bind ctrl-a:select-all,ctrl-d:deselect-all  --preview '[[ -r {} ]] && bat --style=numbers --color=always --line-range :500 {}')"
  if [[ -n $file ]]
    then 
      gio trash ${file}
    #  echo "${file}"
  fi
}


function fzrenamefile
{
  file="$(fzf --preview='file {}')" #--bind='del:execute(rm -ri {})'
    if [[ -n $file ]]
    then
      read -r -p "Enter then new name: " newName
      mv -i "$file" "$newName" && echo Renamed "$file" to "$newName"
  fi
}

function fzdeletefolder
{
  folder="$(find . -type d | fd -t d  --maxdepth 1 | fzf -m --preview='tree -C {} | head -n 50' \
  --header='Enter y to delete')" #--bind='del:execute(rm -ri {})'
    if [[ -n $folder ]]
    then
      gio trash "$folder" && echo "$folder" moved to trash.
  fi
}

#alias btags='fzf -e --preview "bat --color=always --style=header,grid --line-range :500 {}"'

function fzfolder
{
# Decided against showing files because of information overload
  cd "$(find . -type d | fd -t d  --maxdepth 1| fzf --preview='tree -C {} | head -n 50')" || exit
}

function fzvids
{
cd /media/adrian/IT_ToolBox/FileCabinet || exit
if [[ $# -gt 0 ]]; then
    search_terms="$*"
  fi

  local video_file
  if [[ $# -gt 0 ]]; then
  video_file=$(find /media/adrian/IT_ToolBox/FileCabinet -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.avi" \) -exec ls {} + | 
    grep -i "$search_terms" | fzf --preview 'sleep 1 > /dev/null 2>&1 & echo {}' --preview-window=up:50%:wrap)
  else
  video_file=$(find /media/adrian/IT_ToolBox/FileCabinet -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.avi" \) -exec ls {} + | 
    fzf --preview 'sleep 1 > /dev/null 2>&1 & echo {}' --preview-window=up:50%:wrap)
  fi

  if [[ -n "$video_file" ]]; then
    (vlc "$video_file" &) </dev/null &>/dev/null
  fi
}

function fztabs
{
  #todo
  # Currently searching by words only. Need to search by files
cd vimwiki || exit

  if [ "$#" -eq 0 ]; then read -r -p "Enter a word to search guitar tabs: " varWord; fi ;
  if [ "$#" -gt 0 ]; then varWord="$*"; fi

local file
file=$(fzf --preview 'bat --style=numbers --color=always --line-range :500 {}') # &&  rg --colors 'match:bg:yellow' \
#      --ignore-case --pretty --context 10 "$varWord")

    if [[ -n $file ]]
    then
       vim -c "BTags" $file 
    fi
}



function fztags
{
  cd ~/vimwiki || exit
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search VimWiki for tags: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

if [[ $# -gt 0 ]]; then
    varWord="$*"
  fi
  cd ~/vimwiki || exit

  if [ -z "$varWord" ]; then file_line=$(rg "\B^#\w+\b*$varWord*"  -i --no-ignore --no-heading --column --color ansi -g '*.md' |
  fzf --ansi --border --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20')
  else

file_line=$(rg "^#\w+*$varWord*"  -i --no-ignore --no-heading --column --color ansi -g '*.md' |

        fzf --ansi --border --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')
fi
        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
    if [[ -n $file ]]; then
        nvim +"$line" "$file"
    fi
}

function fztodo
{
  cd ~/vimwiki || exit
  varWord=#todo
    local file
    file="$(rg --max-count=1 --ignore-case --files-with-matches --no-messages "$varWord" |
      fzf --preview="rg --ignore-case --pretty --context 10 \"$varWord\" {}" &&  rg --colors 'match:bg:yellow' \
      --ignore-case --pretty --context 10 "$varWord")"

   if [[ -n $file ]]
   then
      vim "$file"
   fi
}


function fzpowershell
{

if [[ $# -gt 0 ]]; then
    search_terms="$*"
  else unset search_terms
  fi
  
  cd /home/adrian/.local/share/powershell/Modules || exit

 file_line=$(rg "^function *$search_terms*" -i --no-ignore --no-heading --column --color ansi -g \* | 
        fzf --ansi --border --reverse --delimiter=: \
        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
        #--preview-window 'top,80%,border-bottom')

        file=$(echo "$file_line" | gawk -F: '{print $1}')
        line=$(echo "$file_line" | gawk -F: '{print $2}')
     if [[ -n $file ]]; then
        nvim +"$line" "$file"
     fi

}





function fzgbl
{
# fuzzy get back links
  cd ~/vimwiki || exit
  # Searches current directory. Searches inside files for keyword. Lists files with preview
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to get backlinks: " varWord; fi ;
  if [ ! "$#" -eq 0 ]; then varWord=$1; fi

  local file
    file="$(rg --max-count=1 --ignore-case --files-with-matches --fixed-strings --no-messages \("$varWord"\) |
      fzf --preview="rg --ignore-case --fixed-strings --pretty --context 10 $varWord {}")"

   if [[ -n $file ]]
   then
      vim "$file"
   fi
}

function fzopen
{
  # Needs work. Not working yet.
  fd -t f -H -I -d 1 | 
    fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'| 
    xargs -r -d "\n" xdg-open "$1" 2>&-
}


function fztest
{
  cd ~/bin || exit

 ag bin  "$(tree -dfi | ag '\/X.*')" 

}


function fzfilecabinet
{
  cd /media/adrian/IT_ToolBox/FileCabinet || exit  
  cd "$(fd -t d |
    fzf --preview="tree -L 2 {}" --bind="space:toggle-preview" )" &&
     echo "$PWD" && tree -L 2
}


function fzdocs
{
  #fzcd for Documents folder
 cd ~/Documents && fd -t d | 
    fzf --preview="tree -L 2 {}" --bind="space:toggle-preview" && 
    echo "$PWD"
}

function fzman 
{
  # Fuzzy search man pages
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | 
      awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | 
      bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | 
      xargs -r man
}
  # Get the colors in the opened man page itself
  #export MANPAGER="sh -c 'col -bx | bat -l man -p --paging always'"

function fzpdf 
{
# Will require two variables: 1. PDF 2. Keyword
# Add option to search all pdf in folder or make a separate function

# if [[ ! -f "$1" ]]; then
#        echo "Error: The first argument is not a valid file."
#        return 1
#    fi

    if [[ ! "$1" =~ \.pdf$ ]]; then
        echo "Error: The first argument is not a PDF file."
        return 1
    fi

arg1="$1"
varWord="$2"

    pdfgrep -i -C 10 "$varWord" ./"$arg1" | fzf --preview="rg --ignore-case --pretty --context 10 $varWord {}"  
#    pdfgrep -i -C 10 "$varWord" ./*.pdf | fzf --preview="rg --ignore-case --pretty --context 10 $varWord {}"  
    # rg  --ignore-case --no-messages "$varWord" |
  # 			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 10 {q} {}" 
}


