#!/bin/bash
#todo: add headers, keybindings, preview label, refresh, sort alphabetically or in order
# https://thevaluable.dev/practical-guide-fzf-example/
#
# commands needed:
# bfile
# bword
# bheader
#
# wfile
# wword
# wheader
# 
# fzfile
# fzword

# file_line=$(rg "^(#+ )+[^#]*$varWord*"  -i --no-ignore --no-heading --column --color ansi -g '*.md' | 
#        fzf --ansi --border --reverse --delimiter=: \
#        --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
#        #--preview-window 'top,80%,border-bottom')
#
#        file=$(echo "$file_line" | gawk -F: '{print $1}')
#        line=$(echo "$file_line" | gawk -F: '{print $2}')
#    if [[ -n $file ]]; then
#        nvim +"$line" "$file"
#    fi


function ManArgFzf
{
  if [  "$#" -eq 0 ]; then 
    compgen -c | fzf | xargs man;
    fi ;
    if [  "$#" -eq 1 ]; then 
      man "$1" 
    fi;

    if [  "$#" -eq 2 ]; then 
      man "$1" | grep -- "$2" || echo "$2 not found"; fi
}



function BinTodo
{
  cd ~/bin || exit
  varWord=#todo

  file_line=$(rg "^$varWord"  -i --no-ignore --no-heading --column --color ansi  |
    fzf --ansi --border --reverse --delimiter=: \
    --preview 'bat --color always {1} -n  -H {2} -r {2}:+20')
      #--preview-window 'top,80%,border-bottom')

      file=$(echo "$file_line" | gawk -F: '{print $1}')
      line=$(echo "$file_line" | gawk -F: '{print $2}')
      if [[ -n $file ]]; then
        nvim +"$line" "$file"
      fi
}
alias TodoBin=BinTodo

function FolderTodoFz
{
  varWord=#todo

  file_line=$(rg "$varWord"  -i --no-ignore --no-heading --column --color ansi |
    fzf --ansi --border --reverse --delimiter=: \
    --preview 'bat --color always {1} -n  -H {2} -r {2}:+20')
      #--preview-window 'top,80%,border-bottom')

      file=$(echo "$file_line" | gawk -F: '{print $1}')
      line=$(echo "$file_line" | gawk -F: '{print $2}')
      if [[ -n $file ]]; then
        nvim +"$line" "$file"
      fi
}


function FilesLinesFz
{
  if [ ! "$#" -gt 0 ]; 
  then read -r -p "Enter a word to search a word: " varWord; fi ;
    if [ ! "$#" -eq 0 ]; then varWord=$1; fi

    if [[ $# -gt 0 ]]; then
      varWord="$*"
    fi

    file_line=$(rg "$varWord" -i --no-ignore --no-heading --column \
      --color ansi | fzf --ansi --border --reverse --delimiter=: \
      --preview 'bat --color always {1} -n  -H {2} -r {2}:+20')
          #--preview-window 'top,80%,border-bottom')

          file=$(echo "$file_line" | gawk -F: '{print $1}')
          line=$(echo "$file_line" | gawk -F: '{print $2}')
          if [[ -n $file ]]; then
            nvim +"$line" "$file"
          fi
}







function FunctionGet
{ declare -f "$1" | bat -l bash || exit; }
alias getdefinition=FunctionGet

function FunctionWhere
{ type "$1" | sed 1,1d | bat -l bash || exit ;  }

function BinFiles
{
  # Used to be fzmodule and fbin
  if [[ $# -gt 0 ]]; then
    varWord="$*"
  else unset varWord;
  fi
  cd ~/bin || exit
  unset file

  if [[ -n "$varWord" ]]; then
    vim "${varWord}"
    return
  fi

  local file
  file=$( find . -maxdepth 1 -type f -not -path '*/.*' -printf "%f\n" | 
    sort | fzf --no-sort --ansi --border --preview \
    'bat --style=numbers --color=always --line-range :500 {}' | sort) 
      # &&  rg --colors 'match:bg:yellow' \
      #      --ignore-case --pretty --context 10 "$varWord")

      if [[ -n $file ]]
      then
        vim -c "BTags" "$file"
      fi
      # Updated files list to be sorted, brightened with ansi, added border
      # Updated naming convention for consistency and intuitiveness
}

function FilesRecentModified
{
  unset file
  local file
  file=$( find . -maxdepth 1 -type f -not -path '*/.*' -daystart \
    -mtime -7 -printf "%TY-%Tm-%Td %TH:%TM %f \n" | sort --reverse |  
    fzf --header 'Files Modifed Last 7 Days' --with-nth=1..3 --ansi --border \
    --preview "bat --style=numbers --color=always --line-range :500 ${3}" | 
    awk "{print $3}") 
      # &&  rg --colors 'match:bg:yellow' \
      # echo $file
      #      --ignore-case --pretty --context 10 "$varWord")
      #%TY-%Tm-%Td %TH:%TM\n
      if [[ -n $file ]]
      then
        vim -c "BTags" "$file"
      fi
      # Updated files list to be sorted, brightened with ansi, added border
      # Updated naming convention for consistency and intuitiveness
}

function FilesRecentCreated
{
  #todo Fix all files in wiki that have spaces and/or dashes
  unset file
  local file
  file=$( find . -maxdepth 1 -type f -not -path '*/.*' -daystart -atime -30 \
    -printf "%TY-%Tm-%Td %TH:%TM %f \n" | sort --reverse |  fzf --header \
    'Files Created Last 7 Days' --with-nth=1..3 --ansi --border --preview \
    "bat --style=numbers --color=always --line-range :500 ${3}" | awk \
    "{print $3}") 
      # &&  rg --colors 'match:bg:yellow' \
      # echo $file
      #      --ignore-case --pretty --context 10 "$varWord")
      #%TY-%Tm-%Td %TH:%TM\n
      if [[ -n $file ]]
      then
        vim -c "BTags" "$file"
      fi
      # Updated files list to be sorted, brightened with ansi, added border
      # Updated naming convention for consistency and intuitiveness
}

#todo idea Make FunctionFz function that combines FunctionGet, FunctionWhere, 
# and BinLines. Need this to search for functions based on keyword. Use fuzzy 
# to create a selection box. Then finally pipe out to BAT.


function FileLines
{
  # Searches all lines in current directory
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
    if [ ! "$#" -eq 0 ]; then varWord=$1; fi

    if [[ $# -gt 0 ]]; then
      varWord="$*"
    fi

    file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi | 
      sort | fzf --no-sort --ansi --border --delimiter=: \
      --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 
          #--preview-window 'top,80%,border-bottom')

          file=$(echo "$file_line" | gawk -F: '{print $1}')
          line=$(echo "$file_line" | gawk -F: '{print $2}')
          if [[ -n $file ]]; then
            nvim +"$line" "$file"
          fi

}

function BinLines
{
  # Fzword in bin folder
  # Used to be fzbin
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
    if [ ! "$#" -eq 0 ]; then varWord=$1; fi

    if [[ $# -gt 0 ]]; then
      varWord="$*"
    fi
    cd ~/bin || exit 
    file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi | 
      sort | fzf --no-sort --ansi --border --delimiter=: \
      --preview 'bat --color always {1} -n -H {2} -r {2}:+20') 
          #--preview-window 'top,80%,border-bottom')

          file=$(echo "$file_line" | gawk -F: '{print $1}')
          line=$(echo "$file_line" | gawk -F: '{print $2}')
          if [[ -n $file ]]; then
            nvim +"$line" "$file"
          fi

}

function PluginsLines
{
  # Fzword in bin folder
  # Used to be fzbin
  if [ ! "$#" -gt 0 ]; then read -r -p "Enter a word to search: " varWord; fi ;
    if [ ! "$#" -eq 0 ]; then varWord=$1; fi

    if [[ $# -gt 0 ]]; then
      varWord="$*"
    fi
    cd ~//.config/nvim/Plugins || exit
    file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi | 
      sort | fzf --no-sort --ansi --border --delimiter=: \
      --preview 'bat --color always {1} -n -H {2} -r {2}:+20')
          #--preview-window 'top,80%,border-bottom')

          file=$(echo "$file_line" | gawk -F: '{print $1}')
          line=$(echo "$file_line" | gawk -F: '{print $2}')
          if [[ -n $file ]]; then
            nvim +"$line" "$file"
          fi

}

function PluginsTodo
{
  # Fzword in bin folder
  # Used to be fzbin

  varWord='^" #todo'
  cd ~//.config/nvim/Plugins || exit
  file_line=$(rg "$varWord" -S --no-ignore --no-heading --column --color ansi  | 
    sort | fzf --reverse --no-sort --ansi --border --delimiter=: \
    --preview 'bat --color always {1} -n -H {2} -r {2}:+20')
      #--preview-window 'top,80%,border-bottom')
      file=$(echo "$file_line" | gawk -F: '{print $1}')
      line=$(echo "$file_line" | gawk -F: '{print $2}')
      if [[ -n $file ]]; then
        nvim +"$line" "$file"
      fi

}
alias TodoPlug=VimPlugTodo

function BinFunctions
{
  # fzfunction
  if [[ $# -gt 0 ]]; then
    search_terms="$*"
  else unset search_terms;
  fi
  cd "$HOME/bin" || exit;
  local file_line
  local file
  local line
  file_line=$(rg "^function *$search_terms*" -i --no-ignore --no-heading \
    --column --color ansi -g \* | fzf --reverse --ansi --border --delimiter=: \
    --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
      #--preview-window 'top,80%,border-bottom')

      file=$(echo "$file_line" | gawk -F: '{print $1}')
      line=$(echo "$file_line" | gawk -F: '{print $2}')
      if [[ -n $file ]]; then
        nvim +"$line" "$file"
      fi
    }




                                                                                                                                                                                                                                            function PluginsFunctions
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              # fzfunction
                                                                                                                                                                                                                                              if [[ $# -gt 0 ]]; then
                                                                                                                                                                                                                                                search_terms="$*"
                                                                                                                                                                                                                                              else unset search_terms;
                                                                                                                                                                                                                                              fi
                                                                                                                                                                                                                                              cd "$HOME/.config/nvim/Plugins" || exit;
                                                                                                                                                                                                                                              local file_line
                                                                                                                                                                                                                                              local file
                                                                                                                                                                                                                                              local line
                                                                                                                                                                                                                                              file_line=$(rg "^\" function *$search_terms*" -i --no-ignore --no-heading \
                                                                                                                                                                                                                                                --column --color ansi -g \* | 
                                                                                                                                                                                                                                                fzf --reverse --ansi --border --delimiter=: \
                                                                                                                                                                                                                                                --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #--preview-window 'top,80%,border-bottom')

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              file=$(echo "$file_line" | gawk -F: '{print $1}')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              line=$(echo "$file_line" | gawk -F: '{print $2}')
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if [[ -n $file ]]; then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                nvim +"$line" "$file"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              fi
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            function FilesFz
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            {


  # Used to be fzmodule and fbin
  if [[ $# -gt 0 ]]; then
    varWord="$*"
  else unset varWord;
  fi
  unset file

  if [[ -n "$varWord" ]]; then
    vim "${varWord}"
    return
  fi

  local file
  file=$( find . -maxdepth 1 -type f -not -path '*/.*' -printf "%f\n" | sort | 
    fzf --reverse --no-sort --ansi --border --prompt "Search: " --border \
    --border-label "$(pwd)/" --preview 'bat --style=numbers --color=always \ 
    --line-range :500 {}' | sort) # &&  rg --colors 'match:bg:yellow' \
    #      --ignore-case --pretty --context 10 "$varWord")

  if [[ -n $file ]]
  then
    vim -c "BTags" "$file" 
  fi
  # Updated files list to be sorted, brightened with ansi, added border
  # Updated naming convention for consistency and intuitiveness
}





function FilesDeleteFz
{
  #fzfiles now has delete capabilities
  local file
  file="$(fd -t f -t --maxdepth 1 | 
    fzf -m --bind ctrl-a:select-all, \
    ctrl-d:deselect-all \
    --preview '[[ -r {} ]] && 
    bat --style=numbers --color=always --line-range :500 {}')"
      if [[ -n $file ]]
      then 
        gio trash "${file}"
        #  echo "${file}"
      fi
}


function FilesRenameFz
{
  file="$(fzf --preview='file {}')" #--bind='del:execute(rm -ri {})'
  if [[ -n $file ]]
  then
    read -r -p "(Testing) Enter then new name: " newName
    mv -i "$file" "$newName" && echo Renamed "$file" to "$newName"
  fi
}

function FoldersDeleteFz
{
  folder="$(find . -type d | fd -t d  --maxdepth 1 | 
    fzf -m --preview='tree -C {} | head -n 50' \
    --header='Enter y to delete')" #--bind='del:execute(rm -ri {})'
      if [[ -n $folder ]]
      then
        gio trash "$folder" && echo "$folder" moved to trash.
      fi
}

#alias btags='fzf -e --preview "bat --color=always --style=header,grid --line-range :500 {}"'

function FolderCdFz
{
  # alias fzls
  # Decided against showing files because of information overload
  cd "$(find . -type d | fd -t d  --maxdepth 1| 
    fzf --preview='tree -C {} | head -n 50')" || exit
}

function VideosFz
{
  cd /media/adrian/IT_ToolBox/FileCabinet || exit
  if [[ $# -gt 0 ]]; then
    search_terms="$*"
  fi

  local video_file
  if [[ $# -gt 0 ]]; then
    video_file=$(find /media/adrian/IT_ToolBox/FileCabinet -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.avi" \) -exec ls {} + | 
      grep -i "$search_terms" | fzf --preview 'sleep 1 > /dev/null 2>&1 & echo {}' --preview-window=up:50%:wrap)
        else
          video_file=$(find /media/adrian/IT_ToolBox/FileCabinet -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.avi" \) -exec ls {} + | 
            fzf --preview 'sleep 1 > /dev/null 2>&1 & echo {}' --preview-window=up:50%:wrap)
  fi

  if [[ -n "$video_file" ]]; then
    (vlc "$video_file" &) </dev/null &>/dev/null
  fi
}

function GuitarFz
{
  #todo
  # Currently searching by words only. Need to search by files
  cd vimwiki || exit

  if [ "$#" -eq 0 ]; then read -r -p "Enter a word to search guitar tabs: " varWord; fi ;
    if [ "$#" -gt 0 ]; then varWord="$*"; fi

    local file
    file=$(fzf --preview 'bat --style=numbers --color=always --line-range :500 {}') 
    # &&  rg --colors 'match:bg:yellow' \
    #      --ignore-case --pretty --context 10 "$varWord")

    if [[ -n $file ]]
    then
      vim -c "BTags" "$file" 
    fi
}



function PowershellFz
{

  if [[ $# -gt 0 ]]; then
    search_terms="$*"
  else unset search_terms
  fi

  cd /home/adrian/.local/share/powershell/Modules || exit

  file_line=$(rg "^function *$search_terms*" -i --no-ignore --no-heading \
    --column --color ansi -g \* | 
    fzf --ansi --border --reverse --delimiter=: \
    --preview 'bat --color always {1} -n  -H {2} -r {2}:+20') 
      #--preview-window 'top,80%,border-bottom')

      file=$(echo "$file_line" | gawk -F: '{print $1}')
      line=$(echo "$file_line" | gawk -F: '{print $2}')
      if [[ -n $file ]]; then
        nvim +"$line" "$file"
      fi

    }

            function ProgramOpenFz
            {
              # Needs work. Not working yet.
              fd -t f -H -I -d 1 | 
                fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'| 
                xargs -r -d "\n" xdg-open "$1" 2>&-
              }




              function FileCabinetFoldersFz
              {
                cd /media/adrian/IT_ToolBox/FileCabinet || exit  
                cd "$(fd -t d |
                  fzf --preview="tree -L 2 {}" --bind="space:toggle-preview" )" &&
                  cd "$PWD" || echo error
                }


                function DocumentsFz
                {
                  #fzcd for Documents folder
                  cd ~/Documents &&

 # Decided against showing files because of information overload
                  cd "$(find . -type d | fd -t d  --maxdepth 1| fzf --preview='tree -C {} | head -n 50')" || exit

#FolderCdFz
#fd -t d |
#  fzf --preview="tree -L 2 {}" --bind="space:toggle-preview" &&
# cd "$PWD"
}

function ManPagesFz
{
  # Fuzzy search man pages
  man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | 
    awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | 
    bat -l man -p --color always' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | 
    xargs -r man
  }
  # Get the colors in the opened man page itself
  #export MANPAGER="sh -c 'col -bx | bat -l man -p --paging always'"

  function PdfFz
  {
    # Will require two variables: 1. PDF 2. Keyword
    # Add option to search all pdf in folder or make a separate function

# if [[ ! -f "$1" ]]; then
#        echo "Error: The first argument is not a valid file."
#        return 1
#    fi

if [[ ! "$1" =~ \.pdf$ ]]; then
  echo "Error: The first argument is not a PDF file."
  return 1
fi

arg1="$1"
varWord="$2"

pdfgrep -i -C 10 "$varWord" ./"$arg1" | fzf --preview="rg --ignore-case --pretty --context 10 $varWord {}"  
#    pdfgrep -i -C 10 "$varWord" ./*.pdf | fzf --preview="rg --ignore-case --pretty --context 10 $varWord {}"  
# rg  --ignore-case --no-messages "$varWord" |
# 			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 10 {q} {}" 
}




